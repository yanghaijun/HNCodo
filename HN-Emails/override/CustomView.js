Ext.ns("Miracle");Miracle.ViewPanel=Ext.extend(Ext.util.Observable,{    constructor:function(viewConfig){        var me=this;        Ext.QuickTips.init();        me.appData={}; //\u53EF\u4EE5\u8BA9\u4F7F\u7528\u8005\u5B89\u5168\u5730\u4FDD\u5B58\u4E34\u65F6\u6570\u636E\u7684\u7A7A\u95F4        me.addEvents("queryopendocument","queryshowtreedocument");        me.dataUrl="/" + SysDBPath + '/agent_CustomViewGetData?openagent';        me.viewConfig=viewConfig;        me.fields=[];        me.dbName=viewConfig.gridConfig.dbName;        me.viewName=viewConfig.gridConfig.viewName;        me.buttonEnable=viewConfig.buttonEnable;        var treeColumnNum=viewConfig.treeColumns?viewConfig.treeColumns.length:0;        if (treeColumnNum>0) {            Ext.each(viewConfig.treeColumns,function(item,i){                item.dataIndex=item.dataIndex||item.header||i.toString();            });        }        Ext.each(viewConfig.columns,function(item,i){            item.menuDisabled=true; //\u9690\u85CF\u5217\u7684\u4E0B\u62C9\u83DC\u5355            item.dataIndex=item.dataIndex||item.header || (i+treeColumnNum + (viewConfig.categoryKey?1:0)).toString();            if (item.showUnread && !me.showUnread) {me.showUnread=item.showUnread}            if (item.imageContent===true || item.linkTarget!="0" || Ext.isFunction(item.cusRenderer)||item.showUnread) {                /*\u628A\u503C\u5F53\u4F5C\u56FE\u7247\u7684\u65F6\u5019*/                item.renderer=function(v,m,r){                    if (Ext.isFunction(item.cusRenderer)) {                        v=item.cusRenderer.apply(this,arguments);                    }                    if (item.showUnread && r.json.isUnread) {v="<span class='red'>"+v+'</span>'}                    if (item.imageContent===true) {                        if (v) {                            v="<img src='"+ v +"'/>";                        }                    }                    if (item.linkTarget!="0" && item.linkTarget!==undefined) {                        v="<a href='#' class='linkcss'>" + v + "</a>"                    }                    return v;                }            }            me.fields.push(item.dataIndex);        });        me.initTree();        if (!viewConfig.gridConfig.showDocument) {            me.initGrid();        }else{            /*\u53F3\u8FB9\u663E\u793A\u7684\u662F\u6587\u6863\u7684\u65F6\u5019*/            me.docPanel = new Ext.Panel({                layout: 'fit',                region: 'center',                html: '<iframe  src="" name="iframeDoc" id="iframeDoc" width="100%" height="100%" marginwidth="0"  marginheight="0" scrolling="no" frameborder="0"/>'            });        }        var items=[];        if (me.gridPanel) {            items.push(me.gridPanel);            me.gridPanel.on("viewready",function(grid){                Ext.each(grid.getColumnModel().config,function(item,index){                    item.fixed=viewConfig.gridConfig.multiSelect && index==0?true:false;                });                me.setDefaultExpand();            });            me.initGridClick();            me.setMouseOver();            me.gridPanel.store.on('load',function(){                me.pagingItemHidden===false?me.showPagingItems(true):"";                me.columnSortable?me.setColumnSortable(false):"";            });            me.gridPanel.store.on("beforeload",function(){                if (me.treePanel) {                    var node=me.treePanel.getSelectionModel().getSelectedNode();                    if (node){                        me.gridPanel.store.baseParams.treeNode=node?node.id:"";                        if (node.attributes.hasDocument) {                            me.gridPanel.store.baseParams.onlyDocument=true;                        }else me.gridPanel.store.baseParams.onlyDocument=undefined;                    }else return false; //\u6CA1\u6709\u9009\u4E2D\u6811\u8282\u70B9\u7684\u8BDD\u5C31\u4E0D\u52A0\u8F7D\u4E86;                }            });        }else if (me.docPanel) {items.push(me.docPanel)}        if (me.treePanel) {items.push(me.treePanel)}        var isTab=viewConfig.isTabPanel!==false && viewConfig.categoryKey==""        if (isTab) me.isTabPanel=true;        me.viewPanel=new (!isTab?Ext.Panel:Ext.TabPanel)({            closable:true,            activeTab:0,            border:false,            layout:!isTab?'fit':undefined,            items:{                title:me.viewConfig.gridConfig.viewDispName||me.viewConfig.gridConfig.viewName,                header:!isTab?false:undefined,                border:false,                layout:'border',                items:items            }        });    },    initTree: function() {        //\u521D\u59CB\u5316\u6811        var me=this;        var viewConfig=me.viewConfig;        if (!viewConfig.treeConfig) {return;}        var loader = new Ext.tree.TreeLoader({            dataUrl:me.dataUrl,            baseParams: {                filterKey:viewConfig.filterKey,                viewName: viewConfig.gridConfig.viewName,                dbName: viewConfig.gridConfig.dbName,                showDocument:viewConfig.gridConfig.showDocument,                multi:viewConfig.gridConfig.showDocument && viewConfig.gridConfig.multiSelect?"1":undefined,                treeDepth: viewConfig.treeColumns.length,                extraAttr:viewConfig.treeConfig.extraAttr            }        });        var root = new Ext.tree.AsyncTreeNode({            text: 'Root',            id: 'Root',            docUnid:'Root',            nodeType: 'async'        });        me.treePanel=new Ext.tree.TreePanel({            region:"west",            split:true,            tbar:[],            collapsible: false,            collapseMode: 'mini',            width:me.viewConfig.navigatorWidth||200,            rootVisible:false,            root:root,            autoScroll:true,            loader: loader,            listeners:{                render:function(){                    this.getSelectionModel().on("selectionchange",function(sm,node){                        if (!node) {return;}                        if (node.id=="Root") {return;}                        if (me.viewConfig.gridConfig.showDocument ) {                            if(node.attributes.docUnid) me.showTreeDocument(node);                              return;                        }                        if (me.isCategoryGrid) {                            me.gridPanel.getSelectionModel().clearSelections();                        }                        if (node.isLeaf()) {                            me.reloadGrid();                           }else if (node.attributes.hasDocument){                            me.reloadGrid({params:{onlyDocument:true}});                        }                    });                },                expandnode:function(node){                    if (node==this.root) {                        this.un("expandnode",arguments.callee);                        me.setDefaultExpand("tree");                    }                }            }        });    },    showTreeDocument: function(node) {        /*\u70B9\u51FB\u5BFC\u822A\u6811\u7684\u65F6\u5019\uFF0C\u5982\u679C\u8282\u70B9\u662F\u6587\u6863\uFF0C\u5219\u6253\u5F00\u6587\u6863\u5230\u53F3\u8FB9*/        var me=this;        var gridConfig=me.viewConfig.gridConfig;        var params={};        params.url = "/" + gridConfig.dbName.replace("\\", "//") +            "/" +(gridConfig.formFormula?gridConfig.viewName:"0")+ "/" + node.attributes.docUnid + "?OpenDocument";        params.node=node;        if (me.fireEvent("queryshowtreedocument",params)===false) {return;}        getIframeLocation(window.frames['iframeDoc']).href=params.url;    },    initGrid: function() {        //\u521D\u59CB\u5316grid        if (!this.viewConfig.gridConfig) {return;}        if (this.viewConfig.columns) {            this.viewConfig.isCategoryGrid?this.initCategoryGrid():this.initCommonGrid();        }    },    initCommonGrid:function(){        //\u666E\u901A\u89C6\u56FE        var me=this;        var viewConfig=me.viewConfig;        /*\u4F20\u5230\u540E\u53F0\u53D6\u6570\u636E\u7684\u53C2\u6570*/        var params={            filterKey: viewConfig.filterKey,            viewName: viewConfig.gridConfig.viewName,            dbName: viewConfig.gridConfig.dbName        };        if (me.showUnread) {params.showUnread=true}        if (me.viewConfig.gridConfig.reverse) {params.reverse=true}        var dataProxy = new Ext.data.HttpProxy({url:me.dataUrl});        var sm;        /*'\u5355\u9009\u8FD8\u662F\u591A\u9009*/        if (viewConfig.gridConfig.multiSelect) {            sm = new Ext.grid.CheckboxSelectionModel({singleSelect:false});            viewConfig.columns.splice(0,0,sm);        }else{            sm =new Ext.grid.RowSelectionModel({singleSelect:true});        }        var jsonStore = new Ext.data.JsonStore({            root:'ViewData',totalProperty: 'totalCount',            fields:me.fields,            proxy: dataProxy,            remoteSort: false,            baseParams:params        });        if (viewConfig.hasPagingBar!==false) {            var pagingBar = new Ext.PagingToolbar({                pageSize: me.getPageSize(),                store:jsonStore,                displayInfo: true,                displayMsg: '\u672C\u9875\u663E\u793A\u8BB0\u5F55 {0} - {1} \u5171 {2} \u6761\u8BB0\u5F55'            });        }        var config=Ext.apply({            region:"center",            id:"tabgrid",            //loadMask:{msg:"\u6B63\u5728\u52A0\u8F7D\u6570\u636E..."},            columns:viewConfig.columns,            store:jsonStore,            tbar:[],            bbar:pagingBar,            sm:sm,            viewConfig:{                forceFit:true            }        },viewConfig.gridConfig);        me.gridPanel=new Ext.grid.GridPanel(config);        if (!viewConfig.treeConfig && viewConfig.gridConfig.notAutoLoad==false) pagingBar?pagingBar.doLoad():me.gridPanel.store.load();    },    initCategoryGrid: function() {        /*\u751F\u6210\u5206\u7C7B\u89C6\u56FE*/        var me=this;        me.isCategoryGrid=true;        var viewConfig=me.viewConfig;        var record = Ext.data.Record.create((me.fields || []).concat([            {name: '_id',type: 'string'},            {name: '_parent',type: 'auto'},            {name: '_is_leaf',type: 'bool'},            {name: '_category'}        ]));        var store = new Ext.ux.maximgb.tg.AdjacencyListStore({            autoLoad: !viewConfig.treeConfig,            url: me.dataUrl,            baseParams :{                filterKey: viewConfig.filterKey,                viewName: viewConfig.gridConfig.viewName,                dbName: viewConfig.gridConfig.dbName            },            reader: new Ext.data.JsonReader({                id: '_id',                root: 'ViewData',                totalProperty: 'totalCount',                successProperty: 'success'            },            record)        });        /*\u5904\u7406\u4E00\u4E0B\u5217,\u52A0\u5165\u4E00\u5217\u7279\u6B8A\u7684\u5206\u7C7B\u7684\u5217,\u5220\u9664\u6240\u6709\u7684\u5DF2\u7ECF\u914D\u7F6E\u662F\u5206\u7C7B\u7684\u5217*/        var columns=[{            id: '_categoryColumnId',            header: me.getCategoryHeader(),            dataIndex: '_category',            width: me.getCategoryWidth(),            fixed:true,            resizable: true,            sortable: false,            renderer: function(v){                if (this.cusRenderer) {v=this.cusRenderer.apply(this,arguments)}                return "<div style='float:left;display:inline-block' ext:qtip='"+v+"'>" + v + "</div>"            },            menuDisabled: true        }];        Ext.each(viewConfig.columns,function(item){            if (!item.isCategory) {                columns.push(item);            }else{                if (Ext.isFunction(item.cusRenderer)) {                    columns[0].cusRenderer=item.cusRenderer;                }            }        });        var sm;        /*'\u5355\u9009\u8FD8\u662F\u591A\u9009*/        if (viewConfig.gridConfig.multiSelect) {            sm = new Ext.grid.CheckboxSelectionModel({singleSelect:false});            columns.splice(0,0,sm);        }else{            sm =new Ext.grid.RowSelectionModel({singleSelect:true});        }        if (viewConfig.hasPagingBar!==false) {            var pagingBar=new Ext.ux.maximgb.tg.PagingToolbar({                store: store,                displayInfo: true,                pageSize:me.getPageSize()            })        }        var colModel = new Ext.grid.ColumnModel(columns);        var grid= new Ext.ux.maximgb.tg.GridPanel({            region:"center",            id:"tabgrid",            store: store,            stripeRows: false,            master_column_id: '_categoryColumnId',            enableColumnMove : false,             border: false,            sm:sm,            enableColumnResize:true,             //loadMask: true,            enableColumnHide:true,            cm: colModel,            viewConfig:{                forceFit:true,                enableRowBody:true            },            tbar:[],            bbar: pagingBar        });        me.gridPanel=grid;        grid.on("render",function(){            grid.getSelectionModel().selectFirstRow();        });        grid.store.on('expandnode',function(store,rc){                  if (rc) {                preventChildSelection=true;                grid.getSelectionModel().selectRecords([rc]);                preventChildSelection=false            }        });        var preventChildSelection=false;        grid.getSelectionModel().on('rowselect',setChildSelection);        grid.getSelectionModel().on('rowdeselect',setChildSelection);        function setChildSelection (sm,index,rc) {            if (preventChildSelection) return;            var me=this;            var store=grid.getStore();            var children=store.getNodeChildren(rc);            if (children){                Ext.each(children,function(child){                    if (sm.isSelected(index)) {                        sm.selectRecords([child],true);                    }else{                        sm.deselectRow(store.indexOf(child));                    }                });            }        }        //grid.store.reloadBak=grid.store.reload;        //grid.store.reload=function(){            ////\u6539\u5199\u4E00\u4E0Breload,\u5982\u679C\u662F\u6709\u9009\u62E9\u5230\u6587\u6863\u7684\u8BDD\uFF0C\u5C31\u5237\u65B0\u6240\u6709\u7684\u9009\u62E9\u6587\u6863\u5206\u7C7B\uFF0C\u5426\u5219\u5C31\u662F\u65E7\u7684reload            //var me=this;            //var sm=grid.getSelectionModel();            //if (sm.getCount()==0) {                //grid.store.reloadBak();            //}else{                //var s = sm.getSelections();                //var pnodes=[];                //me.storeExpandState();                //me.setActiveNode(null);                //me.load({callback:function(){me.restoreExpandState()}});            //}        //}        grid.store.expandPath=function(path){            //\u4ECE\u6700\u9876\u5C42\u5F00\u59CB\u9010\u7EA7\u5C55\u5F00\u5206\u7C7B            if (!Ext.isArray(path)) return;            var me=this;            var id;            while(id=path.pop()){                var node=this.getById(id);                if (node){                    if (me.isLoadedNode(node)) {                        me.expandNode(node);                    }else{                        var params={};                        params[me.paramNames.active_node]=node.id;                        this.load({                            add:true,                            params:params,                            scope:me,                            callback:function(){me.expandNode(me.getById(params[this.paramNames.active_node]));me.expandPath.call(this,path)}                        });                        return;                    }                }            }        }        grid.store.getPath=function(rc){            var path=[];            var pnode=rc;            path.push(rc.id);            while(pnode=this.getNodeParent(pnode)){                path.push(pnode.id);            }            return path;        }        var expandState=[];        grid.store.storeExpandState=function(){            //\u4FDD\u5B58\u5C55\u5F00\u72B6\u6001            var me=this;            expandState=[];            var sm=grid.getSelectionModel();            Ext.each(sm.getSelections(),function(item){                if (me.isLeafNode(item)) {                    expandState.push(me.getPath(item));                }            });        }        grid.store.restoreExpandState=function(){            //\u6062\u590D\u5C55\u5F00\u72B6\u6001            var me=this;            Ext.each(expandState,function(path){                me.expandPath(path);            })        }    },    getPageSize: function() {        /*\u8FD4\u56DE\u89C6\u56FE\u6BCF\u9875\u663E\u793A\u7684\u6761\u6570*/        var tsize=Math.round((Ext.getBody().getHeight()-(81+32))/(22));        var pagesize = tsize>10?tsize:10;        return pagesize;    },    getCategoryHeader: function() {        /*\u53D6\u5F97\u5206\u7C7B\u5217\u7684\u6807\u9898\uFF0C\u628A\u591A\u4E2A\u5217\u7684\u5217\u6807\u9898\u5408\u6210\u4E00\u4E2A\uFF08\u6CA1\u6709\u914D\u7F6E\u7684\u8BDD\uFF09*/        if (this.viewConfig.gridConfig.categoryHeader) {            return this.viewConfig.gridConfig.categoryHeader;        }        var columns=this.viewConfig.columns;        var header=[];        for (var i = 0; i < columns.length; i++) {            var col=columns[i];            if (col.isCategory) {                if (col.header)header.push(col.header);            } else {                return header.join("\\");            }        }    },    getCategoryWidth: function() {        /*\u53D6\u5F97\u5206\u7C7B\u5217\u7684\u5BBD\u5EA6\uFF0C\u628A\u591A\u4E2A\u5206\u7C7B\u5217\u7684\u5217\u5BBD\u52A0\u8D77\u6765*/        if (this.viewConfig.gridConfig.categoryWidth) {            return this.viewConfig.gridConfig.categoryWidth;        }        var columns=this.viewConfig.columns;        var width=0;        for (var i = 0; i < columns.length; i++) {            var col=columns[i];            if (col.isCategory) {                width+=parseInt(col.width,10);            } else {                return width;            }        }    },    getTip: function(){        if (!this.tooltip){            this.tooltip=new Ext.Tip({                renderTo:Ext.getBody()            });                   }        return this.tooltip;    },    showTip: function(xy,text,width) {        //\u5728xy(\u5982[100,120])\u5904\u663E\u793A\u63D0\u793A        var tip=this.getTip();        if (width) {tip.setWidth(width)}        tip.update(text);        tip.showAt(xy);    },    hideTip: function() {        this.getTip().hide();    },    setMouseOver: function () {        /*\u8BBE\u7F6E\u9F20\u6807\u79FB\u52A8\u5230\u5355\u5143\u683C\u5185\u5BB9\u4E0A\u9762\u7684\u65F6\u5019\u662F\u5426\u51FA\u73B0qtips*/        var me = this;        var gridView = me.gridPanel.getView();        var timeout = 400;        var timeoutid;        var lastCell;        var mover = function (e) {            clearTimeout(timeoutid);            timeoutid = setTimeout(function () {                               var colIndex = gridView.findCellIndex(e.getTarget());                var rowIndex = gridView.findRowIndex(e.getTarget());                if (colIndex !== false && rowIndex !== false) {                    var cell = Ext.get(gridView.getCell(rowIndex, colIndex));                    var tip = cell.getAttribute("ext:qtip")                    var hasTips=false;                    Ext.each(cell.query("span,div"),function(e){                        if (e.getAttribute("ext:qtip")) {                            hasTips=true;                            return false;                        }                    });                    if (hasTips) {return;}                    /*\u6D4B\u8BD5\u6587\u6863\u7684\u957F\u5EA6\u80FD\u5426\u5728\u5217\u91CC\u9762\u663E\u793A\u5B8C\u6574*/                    var text = me.gridPanel.store.getAt(rowIndex).data[me.gridPanel.getColumnModel().config[colIndex].dataIndex];                    if (!text) {                        return;                    }                    var textWidth = Ext.util.TextMetrics.measure(cell, text);                    if (textWidth.width + (me.isCategoryGrid && colIndex == 1 ? 30 : 8) > cell.getWidth()) {                        var xy=[e.getPageX()+13,e.getPageY()+10];                        me.showTip(xy,text,cell.getWidth()+100);                    }                }            }, timeout);        }        var mout = function () {            clearTimeout(timeoutid);            me.hideTip();        }        this.gridPanel.addListener('mouseover', mover);        this.gridPanel.addListener('mouseout', mout);    },    initToolBar: function() {        this.initPanelToolbar(this.gridPanel,this.viewConfig.buttons);        this.initPanelToolbar(this.treePanel,this.viewConfig.treeButtons);        if (this.viewConfig.gridConfig.searchBar!==0)this.addSearchBar(this.gridPanel);    },    initPanelToolbar: function(panel,buttons) {        if (!panel || this.buttonEnable==='0') {return;}        var toolbar=panel.getTopToolbar();        if (!toolbar) {return;}        if (buttons) {            /*\u663E\u793A\u89C6\u56FE\u7684\u64CD\u4F5C*/            toolbar.addButton(buttons);            toolbar.doLayout();            if (toolbar.hidden) {toolbar.show();}        }else{            /*\u6CA1\u6709\u6309\u94AE\u7684\u65F6\u5019,\u9690\u85CF\u64CD\u4F5C\u680F*/            if (!toolbar.hidden) {toolbar.hide();}        }    },    setDefaultExpand: function(type) {        /*\u6253\u5F00\u89C6\u56FE\u7684\u65F6\u5019,\u8BBE\u7F6E\u9ED8\u8BA4\u7684\u5C55\u5F00\u5C42\u6B21*/        var me=this;        var listLoadType=me.viewConfig.treeConfig.listLoadType;        if (listLoadType=="1") {return;}        var expandTreeNode=function(node,selectChild){            if (!node.isLeaf()) {                node.expand(false,false,function(){                    if (!selectChild) {return;}                    var child=node.firstChild;                    if (child && child.isLeaf()) {                        child.select();                    }                });            }        }        if (type=="tree"){            //\u5C55\u5F00\u6811\u8282\u70B9            var root=me.treePanel.root;            if (root.firstChild && root.firstChild.isLeaf()) {                root.firstChild.select();            }            if (listLoadType=="3") {                Ext.each(root.childNodes,function(item,index){                    expandTreeNode(item,index==0);                });            }else{                //\u9ED8\u8BA4\u662F\u5C55\u5F00\u7B2C\u4E00\u4E2A                if (root.firstChild && !root.firstChild.isLeaf()) {                    expandTreeNode(root.firstChild,true);                }            }        }else{            /*\u5C55\u5F00grid\u8282\u70B9,todo*/        }    },    addSearchBar: function(panel) {        /*\u4E3Apanel\u7684\u5DE5\u5177\u680F\u52A0\u4E0A\u641C\u7D22\u7684\u6309\u94AE*/        var me=this;        if (!panel) {return;}        var tbar=panel.getTopToolbar();        if (!tbar) {return;}        var items=[            '->',            {xtype:'tbtext',text:'<img src="/weboa/images/Toolbar_ico/viewlist_search.gif">'},            {xtype:'tbtext',text:'\u67E5\u627E:'},            {xtype: 'textfield',id:'FastSearchKey',width:100,emptyText:'\u8F93\u5165\u641C\u7D22\u5173\u952E\u5B57',                listeners :{specialKey :function(field,e){if (e.getKey() == Ext.EventObject.ENTER){me.fastSearch(field.getValue());}}}            },            {xtype: 'button',text:'\u786E\u5B9A',tooltip:'\u8F93\u5165\u67E5\u627E\u5173\u952E\u5B57\u540E\u8FDB\u884C\u5FEB\u901F\u641C\u7D22',icon:'/weboa/images/Toolbar_ico/accept.png',            	//\u539F\u4EE3\u7801tbar.findByType('textfield',false)[0].getValue()\u53D6\u503C\u4E0D\u6B63\u786E\uFF0C\u6539\u4E3A\u53D6[1]\u7684\u503C\uFF0C\u9C8D\u5174\u8D8520160711            	handler:function(){me.fastSearch(tbar.findByType('textfield',false)[1].getValue());}    		}        ];        tbar.add(items);        if (tbar.hidden) {tbar.show()}        tbar.doLayout();    },    fastSearch:function(key,searchColumns){        /*\u5FEB\u901F\u641C\u7D22,key\u662F\u641C\u7D22\u5173\u952E\u5B57,searchColumns\u662F\u8981\u641C\u7D22\u7684\u5217\u7684\u6807\u9898*/        var me=this;        if (!key) {            me.reloadGrid();            return;        }        var searchColumns=searchColumns||me.searchColumns;        var params=Ext.apply({"searchKey":key,"searchColumns":(searchColumns?searchColumns.join(','):undefined)},me.gridPanel.store.baseParams);        Ext.Ajax.request({            url: "/"+SysDBPath+"/agent_CustomViewGetData?OpenAgent",            success: function(v) {                var obj =  Ext.decode(v.responseText);                if (!obj.success) {                    Ext.Msg.alert("\u641C\u7D22\u6570\u636E\u51FA\u9519:", obj.ErrorMsg)                }else{                    me.setViewData(obj);                }            },            failure: function(v) {                Ext.Msg.alert("\u8C03\u7528Ajax\u51FA\u9519:", v.responseText)            },            params:params        });    },    setViewData: function(data) {        /*\u628A\u6570\u7EC4\u5B9A\u4E49\u7684\u6570\u636EviewData\u5199\u5230gridPanel\u91CC\u9762,\u5FC5\u8981\u65F6\u8981\u6392\u5E8F*/        var me=this;        var bbar=me.gridPanel.getBottomToolbar();        var categoryColumns=[];        var viewConfig=me.viewConfig;        var sortColumns=[];        /*\u53D6\u51FA\u6240\u6709\u5206\u7C7B\u5217\u7684\u6807\u9898\u653E\u5230\u6570\u7EC4\u91CC\u9762*/        if (viewConfig.treeColumns) {            for (var i = 0; i < viewConfig.treeColumns.length; i++) {                var col=viewConfig.treeColumns[i];                categoryColumns.push(col.dataIndex);                sortColumns.push({dataIndex:col.dataIndex,dir:col.sortType=="1"});            }        }        if (viewConfig.columns) {            for (var i = 0; i < viewConfig.columns.length; i++) {                var col=viewConfig.columns[i];                if (col.isCategory) {                    categoryColumns.push(col.dataIndex);                };                if (col.sortType=="1"||col.sortType=="2") {                    sortColumns.push({dataIndex:col.dataIndex,dir:col.sortType=="1"});                }            }        }        /*\u6392\u5E8F\u4E00\u4E0B*/        data.ViewData.sort(function(a,b){            for (var i = 0; i < sortColumns.length; i++) {                var col=sortColumns[i];                if (col){                    var va=a[col.dataIndex];                    var vb=b[col.dataIndex];                    if (va===undefined || vb===undefined) return -1;                    if (typeof va=="number") {                        if(va>vb){                            return col.dir?1:-1;                        }else{return col.dir?-1:1;}                    }else{                        if(va.localeCompare(vb)>0){                            return col.dir?1:-1;                        }else{return col.dir?-1:1;}                                    }                }            }        });        if (!me.isCategoryGrid) {            me.gridPanel.store.loadData(data);        }else{            /*\u751F\u6210\u5206\u7C7B\u6761\u76EE*/            var categoryData={};            var createCategoryEntry=function(pathArray,item){                /*\u6309pathArray\u751F\u6210\u5206\u7C7B\u6761\u76EE,\u6BCF\u4E2A\u5206\u7C7B\u6761\u76EE\u6709\u8BB0\u5230\u5230\u81EA\u5DF1\u7684\u4E0B\u7EA7\u5206\u7C7B\u7684\u4E0B\u7EA7\u6587\u6863*/                var id="";                for (var i = 0; i < pathArray.length; i++) {                    var attr=pathArray[i];                    var pid=id;                    id=me.ArrayConvert(i==pathArray.length?pathArray:pathArray.slice(0,i+1),"encode");                    if (!categoryData[id]) {                        categoryData[id]={};                        categoryData[id].entry={"_parent":pid,"_id":id,"_category":pathArray[i].right("$"),"_is_leaf":false};                        categoryData[id].childDocs=[];                        categoryData[id].subCategory=[];                        if (pid) {                            categoryData[pid].subCategory.push(categoryData[id]);                        }                    }                }                item["_parent"]=id;                categoryData[id].childDocs.push(item);            }            //var filterDepth=me.filterDepth();            Ext.each(data.ViewData,function(item){                item['_is_leaf']=true;                var category=[];                for (var i = 0; i < categoryColumns.length; i++) {                    var dataIndex=categoryColumns[i];                    var tmpArr=item[dataIndex].split("\\");                    for (var j = 0; j < tmpArr.length; j++) {                        category.push((j===0?'0$':'1$')+tmpArr[j]);                    }                }                //if (filterDepth) {                    //category=category.slice(filterDepth);                //}                createCategoryEntry(category,item);            });            var tmpViewData=[];            var pushCategory=function(cate){                tmpViewData.push(cate.entry);                for (var i = 0; i < cate.childDocs.length; i++) {                    if (cate.childDocs[i]){                        tmpViewData.push(cate.childDocs[i]);                    }                }                for (var i = 0; i < cate.subCategory.length; i++) {                    if (cate.subCategory[i]){                        pushCategory(cate.subCategory[i]);                    }                }            }            for (var o in categoryData){                var cateEntry=categoryData[o];                if (!cateEntry.entry['_parent']) {                    pushCategory(cateEntry);                }            }            data.ViewData=tmpViewData;            me.gridPanel.store.loadData(data);        }        if (bbar) {            if (data.totalCount==0) {                bbar.displayItem.setText("\u6CA1\u6709\u641C\u7D22\u5230\u5408\u9002\u7684\u6570\u636E");            }else if(data.searchCount>data.totalCount){                bbar.displayItem.setText("\u641C\u7D22\u5230"+data.searchCount+"\u6761\u6570\u636E!\u663E\u793A\u5176\u4E2D\u7684"+data.totalCount+"\u6761");            }else{                bbar.displayItem.setText("\u641C\u7D22\u5230"+data.searchCount+"\u6761\u6570\u636E!");            }            bbar.displayItem.el.frame("#f00",3);            me.showPagingItems(false);        }        me.setColumnSortable(true);    },    showPagingItems:function(display){        /*\u5207\u6362\u5206\u9875\u680F\u6309\u94AE\u7684\u663E\u793A,\u641C\u7D22\u7684\u65F6\u5019\u7528*/        if (this.pagingItemHidden===display) {return;}        var bbar=this.gridPanel.getBottomToolbar();        if (bbar) {            bbar.items.each(function(item){                if (item!==bbar.displayItem) {                    display?item.show():item.hide();                }            });        }        this.pagingItemHidden=display;    },    setColumnSortable:function(state){        /*\u8BBE\u7F6E\u6240\u6709\u5217\u662F\u5426\u80FD\u70B9\u51FB\u6392\u5E8F,\u4E0D\u662F\u5206\u7C7B\u89C6\u56FE\u7684\u65F6\u5019*/        var me=this;        if (me.columnSortable==state) {return;}        var grid=me.gridPanel;        var cols=grid.getColumnModel().config;        Ext.each(cols,function(col){            col.sortable=state;        });        grid.getColumnModel().setConfig(cols);        this.columnSortable=state;    },    filterDepth: function() {        /*\u6839\u636E\u914D\u7F6E\u7684\u8FC7\u8651\u6761\u4EF6\u548C\u6811\u8282\u70B9\u6765\u53D6\u5F97\u8FC7\u6EE4\u4E86\u7684\u5C42\u6B21,\u641C\u7D22\u521B\u5EFA\u5206\u7C7B\u7684\u65F6\u5019\u7528*/        var me=this;        //var treeNode=me.gridPanel.store.baseParams.treeNode||"";        //var filterKey=me.viewConfig.filterKey||"";        //filterKey+=treeNode;        if (filterKey=="") {return 0;}        filterPath=me.ArrayConvert(filterKey,"decode");        return filterPath.length;    },    ArrayConvert: function(v,type) {        var tmp;        if (type=='encode') {            tmp="";            for (var i = 0; i < v.length; i++) {                tmp+=v[i].length + "#" + v[i];            }        }else{            tmp=[];            while (v!="") {                var num=parseInt(v.left("#"),10);                v=v.right("#");                if (!isNaN(num)) {                    tmp.push(v.left(num));                    v=v.right(v.length-num);                }else break;            }        }        return tmp;    },    refreshGrid: function(config) {        this.gridPanel.store.reload(config);    },    reloadTree:function(selectPath,appand,att){        var me=this;        if (!me.treePanel) {return;}        if (me.treePanel) {            var selectedNode= me.treePanel.getSelectionModel().getSelectedNode();            if (selectedNode) {                if (selectPath === "") {                    selectPath =selectedNode.getPath(att||"text");                }                if (appand) {                    selectPath=selectedNode.getPath(att||"text")+"/"+selectPath;                }            }            this.treePanel.root.reload(function() {                if (selectPath) {                    me.treePanel.selectPath(selectPath,att||"text");                }            });        }    },    reloadGrid:function(){        var me=this;        var pagingBar=me.gridPanel.getBottomToolbar();        pagingBar?pagingBar.doLoad():me.gridPanel.store.load();    },    getSelections: function(attr) {        /*API\u51FD\u6570*/        /*\u8FD4\u56DE\u9009\u62E9\u7684\u6587\u6863\u7684\u5C5E\u6027(\u4E5F\u53EF\u4EE5\u662F\u4E00\u4E2A\u65B9\u6CD5),\u5982\u679C\u4E0D\u6307\u5B9A\u8FD4\u56DE\u7684\u5C5E\u6027\u7684\u65F6\u5019\u8FD4\u56DE\u9009\u62E9\u5230\u7684records;*/        var me=this;        var sm=this.gridPanel.getSelectionModel();        var nodes=sm.getSelections();        if (!nodes[0]) {return null;}        if (!attr) {return nodes;}        var ret=[];        Ext.each(nodes,function(item){            if (!me.isCategoryGrid || me.gridPanel.store.isLeafNode(item)) {                if (Ext.isFunction(attr)) {                    ret.push(attr.call(me,item));                }else{                    ret.push(item.json[attr]);                }            }        });        return ret;    },    setSearchColumns:function(searchColumns){        this.searchColumns=searchColumns;    },    getSelectedId:function(){        return this.getSelections("SID");    },    getSelectTreeNode:function(attribute){        if (!this.treePanel) {return null;}        var arr=this.treePanel.getChecked(attribute);        if (arr.length>1 || arr[0]) {return arr;}        var selectedNode=this.treePanel.getSelectionModel().getSelectedNode();        if (selectedNode) {            arr=[!attribute ? selectedNode : (attribute == 'id' ? selectedNode.id : selectedNode.attributes[attribute])]        }        return arr;    },    expandAll: function(type) {        /*\u5C55\u5F00\u6811\u6216\u8005\u5206\u7C7B\u8868\u683C*/        var me=this;        if (type!=="grid" && me.treePanel) {            me.treePanel.expandAll();        }        if (type!=="tree" && me.gridPanel && me.isCategoryGrid) {            me.gridPanel.store.expandAll();        }    },    collapseAll: function(type){        var me=this;        if (type!=="grid" && me.treePanel) {            me.treePanel.collapseAll();        }        if (type!=="tree" && me.gridPanel && me.isCategoryGrid) {            me.gridPanel.store.collapseAll();        }    },    mask:function(msg,msgCls){        this.viewPanel.body.mask(msg,msgCls);    },    unmask: function() {        this.viewPanel.body.unmask();    },    openDocument:function(record,colIndex,grid){        /*\u6253\u5F00\u6587\u6863*/        var me=this;        var gridConfig=me.viewConfig.gridConfig;        var unid=record.json.SID;        if (!unid) {return;}        if (me.fireEvent('queryopendocument',unid,record,colIndex)===false) {return;}        var url = "/" + gridConfig.dbName.replace("\\", "//") +            "/" +(gridConfig.formFormula?gridConfig.viewName:"0")+ "/" + unid + "?OpenDocument&TabID=" + unid;        var cols=grid.getColumnModel().config;        var col=cols[colIndex];        var linkTarget=col.linkTarget=="3"?viewConfig.userLinkTarget:col.linkTarget;        //if (col.linkTarget!="0") {linkTarget=col.linkTarget;}        if (!linkTarget) {            for (var i = 0; i < cols.length; i++) {                col=cols[i];                if (col.linkTarget !== "0") {                    linkTarget = col.linkTarget=="3"?viewConfig.userLinkTarget:col.linkTarget;                    break;                }            }        }        if (linkTarget=="1") {            //\u65B0\u6807\u7B7E\u9875\u6253\u5F00            var title=record.data[cols[colIndex].dataIndex];            me.openNewTabWindow(url,unid,title);        }else{            //\u65B0\u7A97\u53E3\u6253\u5F00            openCenterWindowUrl(url,record.json.SID,845,638);        }    },    openNewTabWindow:function(url,unid,title){        var me=this;        if (!this.isTabPanel) {            Ext.Msg.alert("\u63D0\u793A","\u5BF9\u8C61\u4E0D\u662F\u4E00\u4E2ATab,\u65E0\u6CD5\u7528tab\u6253\u5F00");            return;        }        unid=unid||'TabWin';        var tabId=unid;        title=title||"\u65E0\u6807\u9898";        var iframeid="iframe" + unid;        var newPanel=me.viewPanel.findById(tabId);        if (newPanel) {            me.viewPanel.setActiveTab(newPanel);            return newPanel;        }        if(location.href.indexOf("TabPanel")>0){            var heighty=document.body.clientHeight;        }else{            var heighty=document.body.clientHeight-28;        }        if(url.indexOf("TabID")<0)url=url+"&TabID="+unid;        url=url+"&LinkTarget=NewTabWindow";        var newPanel=new Ext.Panel({            id:tabId,            //iconCls:'defaulticon',            closable:'true',            title:title,            html: '<iframe  src="'+ url +'" id="' + iframeid + '" width="100%" height="'+heighty+'" marginwidth="0"  marginheight="0" scrolling="no" frameborder="0"/>',            listeners: {                'beforeclose': function() {                    me.viewPanel.setActiveTab(newPanel);                    var iframeWin = window.frames[iframeid];                    if (Ext.isFunction(iframeWin.CloseDoc)) {                    	try{                        if (iframeWin.CloseDoc.call(newPanel,newPanel) === false) {                            return false;                        }                        }catch(e){}                    }                }            }        });        me.viewPanel.add(newPanel);        me.viewPanel.doLayout();        me.viewPanel.setActiveTab(newPanel);        return newPanel;    },    findTab: function(win) {        //\u6839\u636E\u4E00\u4E2Awindow\u5BF9\u8C61,\u627E\u51FA\u5BF9\u8C61\u6240\u5728\u7684tab(window\u662Ftab\u91CC\u9762\u7684\u4E00\u4E2Aiframe\u7684window\u5BF9\u8C61),\u6CA1\u627E\u5230\u5219\u8FD4\u56DEnull;        var tab=null;        this.viewPanel.items.each(function(item){            var tmpWin=item.body.child("iframe",true);             if (tmpWin) {                tmpWin=tmpWin.contentWindow                if (tmpWin==win){                    tab=item;                    return false;                }            }        });        return tab;    },    setReverse: function() {        this.gridPanel.store.baseParams.reverse=true;        //this.treePanel.loader.baseParams.reverse=true;    },    initGridClick: function() {        /*\u8BBE\u7F6E\u5728\u89C6\u56FE\u4E0A\u5355\u53CC\u51FB\u6253\u5F00\u6587\u6863\u7684\u4E8B\u4EF6*/        var me=this;        me.gridPanel.on('cellclick',function(grid,rowIndex,colIndex,e){            if (colIndex===0 && me.viewConfig.gridConfig.multiSelect) return;            var store=grid.getStore();            //if (Ext.isFunction(store.isLeafNode) && !store.isLeafNode(store.getAt(rowIndex))) return;            var target=e.getTarget();            var isClickOnLink=function(el,depth){                return (el.tagName=="A" && el.className=="linkcss") || (depth && isClickOnLink(el.parentNode,--depth));            }            if (!isClickOnLink(target,5)) return;            var sm=grid.getSelectionModel()            var col=grid.getColumnModel().config[colIndex];            if ([1,2,3].indexOf(col.linkTarget)>-1) {                me.openDocument(store.getAt(rowIndex),colIndex,grid);            }        });        me.gridPanel.on("celldblclick",function(grid,rowIndex,colIndex,e){            var store=grid.store;            var rc=store.getAt(rowIndex);            if (me.isCategoryGrid && !store.isLeafNode(rc)){                //\u5982\u679C\u4E0D\u662F\u53F6\u5B50\u70B9\u7684\u8BDD\uFF0C\u53CC\u51FB\u65F6\u5019\u5C1D\u56FE\u5207\u6362\u5C55\u5F00\u548C\u6298\u53E0\u72B6\u6001\uFF08\u6CA1\u8003\u8651\u7B54\u590D\u6587\u6863\u89C6\u56FE\u60C5\u51B5\uFF09                if (!store.isExpandedNode(rc)){                    store.expandNode(rc);                }else{                    store.collapseNode(rc);                }            }else{                //\u5982\u679C\u662F\u53F6\u8282\u70B9\u7684\u8BDD\uFF0C\u5C1D\u8BD5\u6253\u5F00\u6587\u6863                //\u627E\u7B2C\u4E00\u4E0B\u50CF\u662F\u94FE\u63A5\u7684\u8282\u70B9\u5217,\u5426\u5219\u663E\u793A\u7684tab\u6807\u9898\u5947\u602A(\u89C4\u5219:\u914D\u7F6E\u7684\u94FE\u63A5\u5217>\u70B9\u4E2D\u7684\u5217>\u7B2C\u4E00\u4E2A\u4E0D\u4E3A\u7A7A\u7684\u5217)                var cols=grid.getColumnModel().config;                for (var i = 1; i < cols.length; i++) {                    if (cols[i].linkTarget=="1"||cols[i].linkTarget=="2") {                        colIndex=i;                        break;                    }else if(!rc.data[cols[colIndex].dataIndex] && rc.data[cols[i].dataIndex]) colIndex=i;                }                me.openDocument(rc,colIndex,grid);            }        });        me.gridPanel.on("rowcontextmenu",function(grid,rowIndex,eventObject){            var record=grid.store.getAt(rowIndex);            if (me.isCategoryGrid && !me.gridPanel.store.isLeafNode(record)) {                return;            }            if (me.fireEvent("beforerowcontextmenu",grid,rowIndex,eventObject)===false) {return;}            if (eventObject.ctrlKey) {                eventObject.stopEvent();                var unid=record.json["SID"];                var menu=new Ext.menu.Menu({items:[{text:"\u663E\u793A\u6587\u4EF6\u57DF\u503C",handler:showvalue}]})                menu.showAt(eventObject.getXY());                function showvalue(){                    menu.destroy();                    Ext.Ajax.request({                        url: "/" + SysDBPath + '/AgetGet_DocFields?OpenAgent',                        params: {'unid':unid,dbpath:me.dbName},                        success:function(obj){                            var grid = new Ext.grid.PropertyGrid({                                autoHeight: true,                                width : 560,                                source: eval("(" + obj.responseText + ")")                            });                            var win = new Ext.Window({                                title : "\u6587\u6863\u57DF\u503C",                                width : 600,                                 height : 500,                                renderTo: Ext.getBody(),                                 autoDestroy : true,                                resizable : false,                                autoScroll: true,                                modal : true,                                items:grid                            });                            win.show();                        },                        failure:function(a){alert(a.responseText)}                    });                }            }        });    }});